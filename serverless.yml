service: web-page-summarizer

frameworkVersion: "3"

useDotenv: true

provider:
  name: aws
  runtime: provided.al2
  stage: dev
  region: ap-northeast-1

  apiGateway:
    apiKeys:
      - ApiKey

  httpApi:
    authorizers:
      CustomCognitoAuthorizer:
        type: request
        functionName: CustomCognitoAuthorizerFunction

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:Scan
        - dynamodb:Query
      Resource: "*"
    - Effect: Allow
      Action:
        - sqs:SendMessage
        - sqs:ReceiveMessage
        - sqs:DeleteMessage
        - sqs:GetQueueUrl
        - sqs:GetQueueAttributes
      Resource:
        Fn::GetAtt:
          - taskQueue
          - Arn

  ecr:
    images:
      summaryPageContainerImage:
        path: .
        platform: linux/amd64
        file: ./summarytask/Dockerfile

package:
  individually: true
  include:
    - functions/**
  exclude:
    - ./.bin/**

functions:
  AuthLogin:
    handler: functions/auth_login/main.go
    role: CognitoAuthHandlerRole
    package:
      artifact: ./.bin/auth_login.zip
    events:
      - http:
          path: /auth/login
          method: POST
    environment:
      COGNITO_USER_POOL_ID: ${env:COGNITO_USER_POOL_ID}
      COGNITO_CLIENT_ID: ${env:COGNITO_CLIENT_ID}
      COGNITO_ID_POOL_ID: ${env:COGNITO_ID_POOL_ID}
      CORS_WHITE_LIST: ${env:CORS_WHITE_LIST}

  AuthLogout:
    handler: functions/auth_logout/main.go
    role: CognitoAuthHandlerRole
    package:
      artifact: ./.bin/auth_logout.zip
    events:
      - http:
          path: /auth/logout
          method: POST
    environment:
      CORS_WHITE_LIST: ${env:CORS_WHITE_LIST}

  AuthSession:
    handler: functions/auth_session/main.go
    role: CognitoAuthHandlerRole
    package:
      artifact: ./.bin/auth_session.zip
    events:
      - http:
          path: /auth/me
          method: GET
          authorizer:
            name: CookieAuthorizerFunction
            identitySource: method.request.header.Cookie
            type: request
    environment:
      COGNITO_USER_POOL_ID: ${env:COGNITO_USER_POOL_ID}
      COGNITO_CLIENT_ID: ${env:COGNITO_CLIENT_ID}
      COGNITO_ID_POOL_ID: ${env:COGNITO_ID_POOL_ID}
      CORS_WHITE_LIST: ${env:CORS_WHITE_LIST}

  CookieAuthorizerFunction:
    handler: functions/cookie_authorizer/main.go
    role: CognitoAuthHandlerRole
    package:
      artifact: ./.bin/cookie_authorizer.zip
    environment:
      COGNITO_USER_POOL_ID: ${env:COGNITO_USER_POOL_ID}
      COGNITO_CLIENT_ID: ${env:COGNITO_CLIENT_ID}
      COGNITO_ID_POOL_ID: ${env:COGNITO_ID_POOL_ID}

  CustomCognitoAuthorizerFunction:
    handler: functions/custom_cognito_authorizer/main.go
    package:
      artifact: ./.bin/custom_cognito_authorizer.zip

  api:
    handler: functions/api/main.go
    package:
      individually: true
      artifact: ./.bin/api.zip
    events:
      - http:
          path: /{proxy+}
          method: any
          cors: true
          authorizer:
            name: CustomCognitoAuthorizerFunction
            type: request
    environment:
      QUEUE_URL:
        Fn::GetAtt:
          - taskQueue
          - QueueUrl
      RDB_DSN: ${env:RDB_DSN}
      CORS_WHITE_LIST: ${env:CORS_WHITE_LIST}

  stream-event:
    handler: functions/stream-event/main.go
    package:
      individually: true
      artifact: ./.bin/stream-event.zip
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [summaryTable, StreamArn]
    environment:
      RDB_DSN: ${env:RDB_DSN}

  summary-page:
    image:
      name: summaryPageContainerImage
    description: summary web page
    environment:
      QUEUE_URL:
        Fn::GetAtt:
          - taskQueue
          - QueueUrl
      OPENAI_API_KEY: ${ssm:/web-page-summarizer/task/OPENAI_API_KEY}
    timeout: 300
    memorySize: 2048
    ephemeralStorageSize: 1024
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - taskQueue
              - Arn
          batchSize: 1

resources:
  Resources:
    summaryTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: web_page_summary
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: task_status
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: StatusIndex
            KeySchema:
              - AttributeName: task_status
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_IMAGE

    taskQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: web_page_summary_queue
        ReceiveMessageWaitTimeSeconds: 20
        VisibilityTimeout: 1800
        Tags:
          - Key: Name
            Value: web_page_summary

    CognitoIdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        IdentityPoolName: WebPageSummarizerCognitoIdentityPool
        AllowUnauthenticatedIdentities: false
        CognitoIdentityProviders:
          - ClientId: !Ref CognitoUserPoolClient
            ProviderName: !GetAtt CognitoUserPool.ProviderName

    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: WebPageSummarizerCognitoUserPool
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 6
            RequireNumbers: true
        Schema:
          - Name: email
            Required: true
            AttributeDataType: String
            Mutable: true
          - Name: name
            Required: true
            AttributeDataType: String
            Mutable: true

    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: WebPageSummarizerCognitoUserPoolClient
        UserPoolId: !Ref CognitoUserPool
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
        GenerateSecret: false

    CognitoIdPoolRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: WebPageSummarizerCognitoIdPoolRole
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Federated: "cognito-identity.amazonaws.com"
              Action: "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals:
                  "cognito-identity.amazonaws.com:aud": !Ref CognitoIdentityPool
                "ForAnyValue:StringLike":
                  "cognito-identity.amazonaws.com:amr": "authenticated"

    CognitoIdPoolRoleAttachment:
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      Properties:
        IdentityPoolId: !Ref CognitoIdentityPool
        Roles:
          authenticated: !GetAtt CognitoIdPoolRole.Arn

    CognitoAuthHandlerRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: WebPageSummarizerCognitoAuthHandlerRole
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: WebPageSummarizerCognitoAuthHandlerPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - "logs:CreateLogGroup"
                    - "logs:CreateLogStream"
                    - "logs:PutLogEvents"
                  Resource: "*"
          - PolicyName: WebPageSummarizerCognitoAuthHandlerPolicyCognito
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - "cognito-idp:AdminInitiateAuth"
                  Resource: !GetAtt CognitoUserPool.Arn

    # パラメータストアにKEY・URLを登録
    restApiKey:
      Type: AWS::SSM::Parameter
      Properties:
        Name: /web-page-summarizer/task/API_KEY
        Type: String
        Value: ${env:API_KEY}

    restApiUrl:
      Type: AWS::SSM::Parameter
      Properties:
        Name: /web-page-summarizer/task/API_URL
        Type: String
        Value: ${env:API_URL}
