service: web-page-summarizer

frameworkVersion: "3"

useDotenv: true

plugins:
  - serverless-domain-manager

custom:
  customDomain:
    domainName: ${ssm:/web-page-summarizer/${self:provider.stage}/DOMAIN_NAME_BACKEND}
    stage: ${self:provider.stage}
    certificateArn: ${ssm:/web-page-summarizer/${self:provider.stage}/DOMAIN_CERTIFICATE_ARN}
    createRoute53Record: true
    endpointType: "regional"
    securityPolicy: tls_1_2
    apiType: rest

provider:
  name: aws
  runtime: provided.al2
  stage: prod
  region: ap-northeast-1

  environment:
    ENV: ${self:provider.stage}
    QUEUE_URL:
      Fn::GetAtt:
        - taskQueue
        - QueueUrl
    BROWSER_PATH: ${ssm:/web-page-summarizer/${self:provider.stage}/BROWSER_PATH}
    OPENAI_API_KEY: ${ssm:/web-page-summarizer/${self:provider.stage}/OPENAI_API_KEY}
    CORS_WHITE_LIST: ${ssm:/web-page-summarizer/${self:provider.stage}/CORS_WHITE_LIST}
    COGNITO_JWK_URL: ${ssm:/web-page-summarizer/${self:provider.stage}/COGNITO_JWK_URL}
    COGNITO_USER_POOL_ID: ${ssm:/web-page-summarizer/${self:provider.stage}/COGNITO_USER_POOL_ID}
    COGNITO_CLIENT_ID: ${ssm:/web-page-summarizer/${self:provider.stage}/COGNITO_CLIENT_ID}
    COGNITO_ID_POOL_ID: ${ssm:/web-page-summarizer/${self:provider.stage}/COGNITO_ID_POOL_ID}
    REQUEST_RATE_LIMIT_MAX: ${ssm:/web-page-summarizer/${self:provider.stage}/REQUEST_RATE_LIMIT_MAX}
    REQUEST_RATE_LIMIT_TTL_SEC: ${ssm:/web-page-summarizer/${self:provider.stage}/REQUEST_RATE_LIMIT_TTL_SEC}
    API_KEY: ${ssm:/web-page-summarizer/${self:provider.stage}/API_KEY}
    RDB_DSN: ${ssm:/web-page-summarizer/${self:provider.stage}/RDB_DSN}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:Scan
        - dynamodb:Query
      Resource: "*"
    - Effect: Allow
      Action:
        - sqs:SendMessage
        - sqs:ReceiveMessage
        - sqs:DeleteMessage
        - sqs:GetQueueUrl
        - sqs:GetQueueAttributes
      Resource:
        Fn::GetAtt:
          - taskQueue
          - Arn

  ecr:
    images:
      summaryPageContainerImage:
        name: ${self:service}-${self:provider.stage}-summary-page-image
        path: .
        platform: linux/amd64
        file: ./summarytask/Dockerfile

package:
  individually: true
  include:
    - functions/**
  exclude:
    - ./.bin/**

functions:
  AuthLogin:
    name: ${self:service}-${self:provider.stage}-auth-login
    handler: functions/auth_login/main.go
    role: CognitoAuthHandlerRole
    package:
      artifact: ./.bin/auth_login.zip
    events:
      - http:
          path: /auth/login
          method: POST

  AuthLogout:
    name: ${self:service}-${self:provider.stage}-auth-logout
    handler: functions/auth_logout/main.go
    role: CognitoAuthHandlerRole
    package:
      artifact: ./.bin/auth_logout.zip
    events:
      - http:
          path: /auth/logout
          method: POST
    environment:
      ENV: ${self:provider.stage}
      CORS_WHITE_LIST: ${env:CORS_WHITE_LIST}

  AuthSession:
    name: ${self:service}-${self:provider.stage}-auth-session
    handler: functions/auth_session/main.go
    role: CognitoAuthHandlerRole
    package:
      artifact: ./.bin/auth_session.zip
    events:
      - http:
          path: /auth/me
          method: GET
          authorizer:
            name: CookieAuthorizerFunction
            identitySource: method.request.header.Cookie
            type: request

  CookieAuthorizerFunction:
    name: ${self:service}-${self:provider.stage}-cookie-authorizer
    handler: functions/cookie_authorizer/main.go
    role: CognitoAuthHandlerRole
    package:
      artifact: ./.bin/cookie_authorizer.zip

  CustomCognitoAuthorizerFunction:
    name: ${self:service}-${self:provider.stage}-custom-cognito-authorizer
    handler: functions/custom_cognito_authorizer/main.go
    package:
      artifact: ./.bin/custom_cognito_authorizer.zip

  api:
    name: ${self:service}-${self:provider.stage}-api
    handler: functions/api/main.go
    package:
      individually: true
      artifact: ./.bin/api.zip
    events:
      - http:
          path: /{proxy+}
          method: any
          cors: true
          authorizer:
            name: CustomCognitoAuthorizerFunction
            type: request

  stream-event:
    name: ${self:service}-${self:provider.stage}-stream-event
    handler: functions/stream-event/main.go
    package:
      individually: true
      artifact: ./.bin/stream-event.zip
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [summaryTable, StreamArn]

  summary-page:
    name: ${self:service}-${self:provider.stage}-summary-page
    image:
      name: summaryPageContainerImage
    description: summary web page
    timeout: 300
    memorySize: 2048
    ephemeralStorageSize: 1024
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - taskQueue
              - Arn
          batchSize: 1

resources:
  Resources:
    summaryTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: web_page_summary_${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: task_status
            AttributeType: S
          - AttributeName: user_id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: user_id
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: StatusIndex
            KeySchema:
              - AttributeName: task_status
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_IMAGE

    RequestRateLimit:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: request_rate_limit_${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true

    taskQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: web_page_summary_queue_${self:provider.stage}
        ReceiveMessageWaitTimeSeconds: 20
        VisibilityTimeout: 1800
        Tags:
          - Key: Name
            Value: web_page_summary

    CognitoIdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        IdentityPoolName: WebPageSummarizerCognitoIdentityPool${self:provider.stage}
        AllowUnauthenticatedIdentities: false
        CognitoIdentityProviders:
          - ClientId: !Ref CognitoUserPoolClient
            ProviderName: !GetAtt CognitoUserPool.ProviderName

    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: WebPageSummarizerCognitoUserPool${self:provider.stage}
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 6
            RequireNumbers: true
        Schema:
          - Name: email
            Required: true
            AttributeDataType: String
            Mutable: true
          - Name: name
            Required: true
            AttributeDataType: String
            Mutable: true

    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: WebPageSummarizerCognitoUserPoolClient${self:provider.stage}
        UserPoolId: !Ref CognitoUserPool
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
        GenerateSecret: false

    CognitoIdPoolRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: WebPageSummarizerCognitoIdPoolRole${self:provider.stage}
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Federated: "cognito-identity.amazonaws.com"
              Action: "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals:
                  "cognito-identity.amazonaws.com:aud": !Ref CognitoIdentityPool
                "ForAnyValue:StringLike":
                  "cognito-identity.amazonaws.com:amr": "authenticated"

    CognitoIdPoolRoleAttachment:
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      Properties:
        IdentityPoolId: !Ref CognitoIdentityPool
        Roles:
          authenticated: !GetAtt CognitoIdPoolRole.Arn

    CognitoAuthHandlerRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: WebPageSummarizerCognitoAuthHandlerRole${self:provider.stage}
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: WebPageSummarizerCognitoAuthHandlerPolicy${self:provider.stage}
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - "logs:CreateLogGroup"
                    - "logs:CreateLogStream"
                    - "logs:PutLogEvents"
                  Resource: "*"
          - PolicyName: WebPageSummarizerCognitoAuthHandlerPolicyCognito${self:provider.stage}
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - "cognito-idp:AdminInitiateAuth"
                  Resource: !GetAtt CognitoUserPool.Arn
